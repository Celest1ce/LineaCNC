<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - LineaCNC</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="min-h-screen bg-gray-50 font-sans">
    <div class="min-h-screen bg-gray-50">
        <!-- Menu horizontal -->
        <nav class="bg-white shadow-sm border-b border-gray-200">
            <div class="px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <!-- Message de bienvenue -->
                    <div class="flex items-center">
                        <h1 class="text-xl font-semibold text-gray-900">
                            Bonjour, <%= user.pseudo %>
                        </h1>
                    </div>
                    
                    <!-- Menu paramètres -->
                    <div class="relative">
                        <button 
                            id="settingsButton" 
                            class="flex items-center space-x-2 text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                        >
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            <span>Paramètres</span>
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        
                        <!-- Dropdown menu -->
                        <div 
                            id="settingsDropdown" 
                            class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-gray-200"
                        >
                            <a 
                                href="/account" 
                                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                            >
                                <div class="flex items-center">
                                    <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    Paramètres du compte
                                </div>
                            </a>
                            <form action="/auth/logout" method="POST" class="block">
                                <button 
                                    type="submit" 
                                    class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors"
                                >
                                    <div class="flex items-center">
                                        <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                                        </svg>
                                        Déconnexion
                                    </div>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
        
        <!-- Contenu principal -->
        <main class="w-full py-6 px-4 sm:px-6 lg:px-8">
            <div class="w-full">
                <% if (success) { %>
                    <div class="alert-success mb-6">
                        <div class="flex">
                            <svg class="h-5 w-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                            </svg>
                            <%= success %>
                        </div>
                    </div>
                <% } %>
                
                <% if (error) { %>
                    <div class="alert-error mb-6">
                        <div class="flex">
                            <svg class="h-5 w-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                            </svg>
                            <%= error %>
                        </div>
                    </div>
                <% } %>
                
                <!-- En-tête des machines -->
                <div class="flex justify-between items-center mb-6">
                    <div>
                        <h2 class="text-2xl font-bold text-gray-900">Machines CNC</h2>
                        <p class="text-gray-600">Gestion des machines connectées via Web Serial</p>
                    </div>
                    <button 
                        id="addMachineBtn" 
                        class="btn-primary flex items-center space-x-2"
                    >
                        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        <span>Ajouter une machine</span>
                    </button>
                </div>

                <!-- Grille des machines -->
                <div id="machinesGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                    <!-- Les tuiles de machines seront ajoutées dynamiquement ici -->
                </div>

                <!-- Message quand aucune machine -->
                <div id="noMachinesMessage" class="text-center py-12 hidden">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Aucune machine connectée</h3>
                    <p class="mt-1 text-sm text-gray-500">
                        Cliquez sur "Ajouter une machine" pour commencer.
                    </p>
                    <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                        <p class="text-xs text-blue-700">
                            <strong>Note :</strong> L'API Web Serial nécessite HTTPS ou localhost. 
                            Assurez-vous que votre imprimante est connectée via USB.
                        </p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal de paramètres de machine -->
    <div id="machineModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Modifier les paramètres</h3>
                    <button id="closeModal" class="text-gray-400 hover:text-gray-600">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <form id="machineForm">
                    <div class="mb-4">
                        <label for="machineName" class="block text-sm font-medium text-gray-700 mb-2">Nom de la machine</label>
                        <input 
                            type="text" 
                            id="machineName" 
                            class="input-field" 
                            placeholder="Nom de la machine"
                            required
                        >
                    </div>
                    
                    <div class="mb-4">
                        <label for="machineBaudRate" class="block text-sm font-medium text-gray-700 mb-2">Vitesse de transmission</label>
                        <select id="machineBaudRate" class="input-field">
                            <option value="9600">9600 baud</option>
                            <option value="19200">19200 baud</option>
                            <option value="38400">38400 baud</option>
                            <option value="57600">57600 baud</option>
                            <option value="115200" selected>115200 baud</option>
                            <option value="230400">230400 baud</option>
                            <option value="460800">460800 baud</option>
                            <option value="921600">921600 baud</option>
                        </select>
                    </div>
                    
                    <div class="flex justify-end space-x-3">
                        <button 
                            type="button" 
                            id="cancelBtn" 
                            class="btn-secondary"
                        >
                            Annuler
                        </button>
                        <button 
                            type="submit" 
                            class="btn-primary"
                        >
                            Sauvegarder
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
    // Gestion du dropdown des paramètres
    document.addEventListener('DOMContentLoaded', function() {
        const settingsButton = document.getElementById('settingsButton');
        const settingsDropdown = document.getElementById('settingsDropdown');
        
        settingsButton.addEventListener('click', function(e) {
            e.stopPropagation();
            settingsDropdown.classList.toggle('hidden');
        });
        
        // Fermer le dropdown en cliquant ailleurs
        document.addEventListener('click', function(e) {
            if (!settingsButton.contains(e.target) && !settingsDropdown.contains(e.target)) {
                settingsDropdown.classList.add('hidden');
            }
        });
    });

    // Gestion des machines CNC
    class MachineManager {
        constructor() {
            this.machines = new Map();
            this.ports = new Map();
            this.currentEditingMachine = null;
            this.init();
        }

        init() {
            this.bindEvents();
            this.updateDisplay();
        }

        bindEvents() {
            const addMachineBtn = document.getElementById('addMachineBtn');
            const modal = document.getElementById('machineModal');
            const closeModal = document.getElementById('closeModal');
            const cancelBtn = document.getElementById('cancelBtn');
            const form = document.getElementById('machineForm');

            addMachineBtn.addEventListener('click', () => this.addMachine());
            closeModal.addEventListener('click', () => this.hideModal());
            cancelBtn.addEventListener('click', () => this.hideModal());
            form.addEventListener('submit', (e) => this.handleFormSubmit(e));

            // Fermer la modal en cliquant à l'extérieur
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.hideModal();
                }
            });
        }

        showModal(machineId) {
            if (!machineId || !this.machines.has(machineId)) {
                this.showNotification('Machine non trouvée', 'error');
                return;
            }

            this.currentEditingMachine = machineId;
            const modal = document.getElementById('machineModal');
            const nameInput = document.getElementById('machineName');
            const baudRateSelect = document.getElementById('machineBaudRate');

            const machine = this.machines.get(machineId);
            nameInput.value = machine.name;
            baudRateSelect.value = machine.baudRate;

            modal.classList.remove('hidden');
            nameInput.focus();
        }

        hideModal() {
            const modal = document.getElementById('machineModal');
            modal.classList.add('hidden');
            this.currentEditingMachine = null;
        }

        async handleFormSubmit(e) {
            e.preventDefault();
            
            const name = document.getElementById('machineName').value.trim();
            const baudRate = parseInt(document.getElementById('machineBaudRate').value);

            if (!name) {
                this.showNotification('Le nom de la machine est requis', 'error');
                return;
            }

            // Modifier une machine existante
            await this.updateMachine(this.currentEditingMachine, name, baudRate);
            this.hideModal();
        }

        async addMachine() {
            try {
                // Vérifier si l'API Web Serial est supportée
                if (!('serial' in navigator)) {
                    this.showNotification('Web Serial API non supportée par ce navigateur', 'error');
                    return;
                }

                // Demander l'accès aux ports série
                const port = await navigator.serial.requestPort();
                
                // Ouvrir le port avec baud rate par défaut
                await port.open({ baudRate: 115200 });
                
                // Générer un ID unique pour la machine
                const machineId = 'machine_' + Date.now();
                
                // Créer l'objet machine avec paramètres par défaut
                const machine = {
                    id: machineId,
                    name: `Machine ${this.machines.size + 1}`,
                    port: port,
                    status: 'connecting',
                    lastSeen: new Date(),
                    baudRate: 115200,
                    isConnected: false
                };

                // Ajouter à la liste
                this.machines.set(machineId, machine);
                this.ports.set(machineId, port);

                // Mettre à jour l'affichage
                this.updateDisplay();

                // Simuler la connexion
                setTimeout(() => {
                    machine.status = 'connected';
                    machine.isConnected = true;
                    machine.lastSeen = new Date();
                    this.updateDisplay();
                    this.showNotification(`Machine ${machine.name} connectée`, 'success');
                }, 2000);

            } catch (error) {
                console.error('Erreur lors de l\'ajout de la machine:', error);
                if (error.name === 'NotAllowedError') {
                    this.showNotification('Accès au port série refusé', 'error');
                } else if (error.name === 'NotFoundError') {
                    this.showNotification('Aucun port série trouvé', 'error');
                } else {
                    this.showNotification('Erreur: Impossible d\'ajouter la machine', 'error');
                }
            }
        }

        async updateMachine(machineId, name, baudRate) {
            const machine = this.machines.get(machineId);
            if (!machine) return;

            machine.name = name;
            machine.baudRate = baudRate;
            
            // Si la machine est connectée, fermer et rouvrir avec le nouveau baud rate
            if (machine.isConnected) {
                try {
                    machine.port.close();
                    await machine.port.open({ baudRate: baudRate });
                    this.showNotification(`Machine ${name} mise à jour`, 'success');
                } catch (error) {
                    machine.status = 'error';
                    this.showNotification('Erreur lors de la mise à jour', 'error');
                }
            }

            this.updateDisplay();
        }

        disconnectMachine(machineId) {
            const machine = this.machines.get(machineId);
            if (!machine) return;

            try {
                machine.port.close();
                machine.status = 'disconnected';
                machine.isConnected = false;
                this.updateDisplay();
                this.showNotification(`Machine ${machine.name} déconnectée`, 'info');
            } catch (error) {
                console.error('Erreur lors de la déconnexion:', error);
            }
        }

        async reconnectMachine(machineId) {
            const machine = this.machines.get(machineId);
            if (!machine) return;

            try {
                machine.status = 'connecting';
                this.updateDisplay();

                // Rouvrir le port
                await machine.port.open({ baudRate: machine.baudRate });

                // Simuler la reconnexion
                setTimeout(() => {
                    machine.status = 'connected';
                    machine.isConnected = true;
                    machine.lastSeen = new Date();
                    this.updateDisplay();
                    this.showNotification(`Machine ${machine.name} reconnectée`, 'success');
                }, 2000);

            } catch (error) {
                machine.status = 'error';
                this.updateDisplay();
                this.showNotification(`Erreur de reconnexion: ${machine.name}`, 'error');
            }
        }

        removeMachine(machineId) {
            const machine = this.machines.get(machineId);
            if (!machine) return;

            if (confirm(`Êtes-vous sûr de vouloir supprimer la machine "${machine.name}" ?`)) {
                try {
                    if (machine.isConnected) {
                        machine.port.close();
                    }
                    this.machines.delete(machineId);
                    this.ports.delete(machineId);
                    this.updateDisplay();
                    this.showNotification(`Machine ${machine.name} supprimée`, 'info');
                } catch (error) {
                    console.error('Erreur lors de la suppression:', error);
                }
            }
        }

        updateDisplay() {
            const grid = document.getElementById('machinesGrid');
            const noMachinesMessage = document.getElementById('noMachinesMessage');

            // Vider la grille
            grid.innerHTML = '';

            if (this.machines.size === 0) {
                noMachinesMessage.classList.remove('hidden');
                return;
            }

            noMachinesMessage.classList.add('hidden');

            // Créer les tuiles pour chaque machine
            this.machines.forEach((machine, machineId) => {
                const tile = this.createMachineTile(machine);
                grid.appendChild(tile);
            });
        }

        createMachineTile(machine) {
            const tile = document.createElement('div');
            tile.className = 'card p-4 hover:shadow-lg transition-shadow duration-200';
            
            const statusColors = {
                'connected': 'text-green-600 bg-green-100',
                'connecting': 'text-yellow-600 bg-yellow-100',
                'disconnected': 'text-gray-600 bg-gray-100',
                'error': 'text-red-600 bg-red-100'
            };

            const statusTexts = {
                'connected': 'Connectée',
                'connecting': 'Connexion...',
                'disconnected': 'Déconnectée',
                'error': 'Erreur'
            };

            tile.innerHTML = `
                <div class="flex items-start justify-between mb-3">
                    <div class="flex items-center space-x-2">
                        <div class="p-1.5 bg-blue-100 rounded-lg">
                            <svg class="h-4 w-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                        </div>
                        <div class="min-w-0 flex-1">
                            <h3 class="text-sm font-semibold text-gray-900 truncate">${machine.name}</h3>
                            <p class="text-xs text-gray-500">${machine.baudRate} baud</p>
                        </div>
                    </div>
                    <div class="flex space-x-1">
                        <button 
                            onclick="machineManager.showModal('${machine.id}')"
                            class="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                            title="Paramètres"
                        >
                            <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                        </button>
                        <button 
                            onclick="machineManager.removeMachine('${machine.id}')"
                            class="p-1 text-gray-400 hover:text-red-600 transition-colors"
                            title="Supprimer"
                        >
                            <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="space-y-2">
                    <div class="flex items-center justify-between">
                        <span class="text-xs font-medium text-gray-700">Statut:</span>
                        <span class="px-2 py-1 text-xs font-semibold rounded-full ${statusColors[machine.status]}">
                            ${statusTexts[machine.status]}
                        </span>
                    </div>
                    
                    <div class="flex items-center justify-between">
                        <span class="text-xs font-medium text-gray-700">Activité:</span>
                        <span class="text-xs text-gray-500">${this.formatTime(machine.lastSeen)}</span>
                    </div>
                </div>

                ${machine.status === 'connected' ? `
                    <div class="mt-3 pt-3 border-t border-gray-200">
                        <div class="flex space-x-2">
                            <button 
                                onclick="machineManager.disconnectMachine('${machine.id}')"
                                class="flex-1 btn-secondary text-xs py-1.5"
                            >
                                Déconnecter
                            </button>
                            <button class="flex-1 btn-primary text-xs py-1.5">
                                Contrôler
                            </button>
                        </div>
                    </div>
                ` : machine.status === 'disconnected' ? `
                    <div class="mt-3 pt-3 border-t border-gray-200">
                        <button 
                            onclick="machineManager.reconnectMachine('${machine.id}')"
                            class="w-full btn-primary text-xs py-1.5"
                        >
                            Reconnecter
                        </button>
                    </div>
                ` : ''}
            `;

            return tile;
        }

        formatTime(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / 60000);
            
            if (minutes < 1) return 'À l\'instant';
            if (minutes < 60) return `Il y a ${minutes}min`;
            
            const hours = Math.floor(minutes / 60);
            if (hours < 24) return `Il y a ${hours}h`;
            
            return date.toLocaleDateString('fr-FR');
        }

        showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
                type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
                type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
                'bg-blue-100 text-blue-800 border border-blue-200'
            }`;
            notification.textContent = message;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    }

    // Initialiser le gestionnaire de machines
    const machineManager = new MachineManager();
    </script>
    
    <script src="/js/main.js"></script>
</body>
</html>
